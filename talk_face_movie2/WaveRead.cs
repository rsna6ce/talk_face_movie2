using System;
using System.IO;
using System.Windows;

// generated by Grok3

namespace WaveRead
{
    public class WavFileReader
    {
        public class WavHeader
        {
            public string ChunkId { get; private set; }      // "RIFF"
            public uint ChunkSize { get; private set; }      // ファイルサイズ-8
            public string Format { get; private set; }       // "WAVE"
            public string Subchunk1Id { get; private set; }  // "fmt "
            public uint Subchunk1Size { get; private set; }  // フォーマットチャンクのサイズ
            public ushort AudioFormat { get; private set; }  // 1=PCM
            public ushort NumChannels { get; private set; }  // チャンネル数
            public uint SampleRate { get; private set; }     // サンプルレート
            public uint ByteRate { get; private set; }       // バイト/秒
            public ushort BlockAlign { get; private set; }   // 1サンプルのバイト数
            public ushort BitsPerSample { get; private set; }// 1サンプルのビット数
            public string DataChunkId { get; private set; }  // "data"
            public uint DataChunkSize { get; private set; }  // データサイズ

            public WavHeader(BinaryReader reader)
            {
                // RIFFチャンク
                ChunkId = new string(reader.ReadChars(4));
                if (ChunkId != "RIFF") throw new FormatException("Not a RIFF file");

                ChunkSize = reader.ReadUInt32();
                Format = new string(reader.ReadChars(4));
                if (Format != "WAVE") throw new FormatException("Not a WAVE file");

                // fmtチャンクを探す
                Subchunk1Id = new string(reader.ReadChars(4));
                if (Subchunk1Id != "fmt ") throw new FormatException("fmt chunk not found");

                Subchunk1Size = reader.ReadUInt32();
                AudioFormat = reader.ReadUInt16();
                NumChannels = reader.ReadUInt16();
                SampleRate = reader.ReadUInt32();
                ByteRate = reader.ReadUInt32();
                BlockAlign = reader.ReadUInt16();
                BitsPerSample = reader.ReadUInt16();

                // fmtチャンクの残りをスキップ（16バイトを超える場合）
                if (Subchunk1Size > 16)
                {
                    reader.BaseStream.Seek(Subchunk1Size - 16, SeekOrigin.Current);
                }

                // dataチャンクを探す（他のチャンクをスキップ）
                while (true)
                {
                    DataChunkId = new string(reader.ReadChars(4));
                    DataChunkSize = reader.ReadUInt32();

                    if (DataChunkId == "data")
                    {
                        break;
                    }
                    // 他のチャンクをスキップ
                    reader.BaseStream.Seek(DataChunkSize, SeekOrigin.Current);
                }
            }
        }

        public WavHeader Header { get; private set; }
        public short[] WaveformData { get; private set; }

        public void ReadWavFile(string filePath)
        {
            try
            {
                using (FileStream fs = new FileStream(filePath, FileMode.Open, FileAccess.Read))
                using (BinaryReader reader = new BinaryReader(fs))
                {
                    // ヘッダ読み込み
                    Header = new WavHeader(reader);

                    // バリデーション
                    if (Header.AudioFormat != 1)
                        throw new FormatException("Only PCM WAV files are supported");
                    if (Header.BitsPerSample != 16)
                        throw new FormatException("Only 16-bit WAV files are supported");

                    // 波形データの読み込み
                    int sampleCount = (int)(Header.DataChunkSize / (Header.BitsPerSample / 8));
                    WaveformData = new short[sampleCount];

                    for (int i = 0; i < sampleCount; i++)
                    {
                        WaveformData[i] = reader.ReadInt16();
                    }
                }
            }
            catch (Exception ex)
            {
                throw new Exception($"Error reading WAV file: {ex.Message}");
            }
        }
    }
}